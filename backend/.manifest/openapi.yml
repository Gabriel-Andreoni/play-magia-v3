openapi: 3.1.0
info:
  title: MV Playgrounds
  version: 0.0.1
servers:
  - url: http://localhost:1111/api
    description: Development server
paths:
  /collections/produtos:
    post:
      summary: Create a new produto
      description: >-
        Creates a new produto passing the properties in the request body as
        JSON.
      tags:
        - Produtos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateprodutoDto'
      security:
        - Admin: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/produto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
                  error:
                    type: string
                    example: Bad Request
                  statusCode:
                    type: integer
                    example: 400
    get:
      summary: List produtos
      description: >-
        Retrieves a paginated list of produtos. In addition to the general
        parameters below, each property of the produto can be used as a filter:
        https://manifest.build/docs/crud#get-a-list-of-items
      tags:
        - Produtos
      security: []
      parameters:
        - name: page
          in: query
          description: The page number
          required: false
          schema:
            type: integer
            default: 1
        - name: perPage
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          description: The field to order by
          required: false
          schema:
            type: string
            enum:
              - Titulo
              - Subtitulo
              - Descrição_Card
              - Descrição_Produto
              - Foto1
              - Foto2
              - Foto3
              - Foto4
            default: createdAt
        - name: order
          in: query
          description: The order direction
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: []
        - name: Titulo_eq
          in: query
          description: Get produtos where Titulo equals the specified value
          required: false
          schema:
            type: string
        - name: Titulo_neq
          in: query
          description: Get produtos where Titulo does not equal the specified value
          required: false
          schema:
            type: string
        - name: Titulo_like
          in: query
          description: >-
            Get produtos where Titulo contains or matches the specified pattern
            (use % for wildcards)
          required: false
          schema:
            type: string
        - name: Titulo_in
          in: query
          description: >-
            Get produtos where Titulo is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: Subtitulo_eq
          in: query
          description: Get produtos where Subtitulo equals the specified value
          required: false
          schema:
            type: string
        - name: Subtitulo_neq
          in: query
          description: Get produtos where Subtitulo does not equal the specified value
          required: false
          schema:
            type: string
        - name: Subtitulo_like
          in: query
          description: >-
            Get produtos where Subtitulo contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: Subtitulo_in
          in: query
          description: >-
            Get produtos where Subtitulo is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: Descrição_Card_eq
          in: query
          description: Get produtos where Descrição_Card equals the specified value
          required: false
          schema:
            type: string
        - name: Descrição_Card_neq
          in: query
          description: Get produtos where Descrição_Card does not equal the specified value
          required: false
          schema:
            type: string
        - name: Descrição_Card_like
          in: query
          description: >-
            Get produtos where Descrição_Card contains or matches the specified
            pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: Descrição_Card_in
          in: query
          description: >-
            Get produtos where Descrição_Card is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
        - name: Descrição_Produto_eq
          in: query
          description: Get produtos where Descrição_Produto equals the specified value
          required: false
          schema:
            type: string
        - name: Descrição_Produto_neq
          in: query
          description: >-
            Get produtos where Descrição_Produto does not equal the specified
            value
          required: false
          schema:
            type: string
        - name: Descrição_Produto_like
          in: query
          description: >-
            Get produtos where Descrição_Produto contains or matches the
            specified pattern (use % for wildcards)
          required: false
          schema:
            type: string
        - name: Descrição_Produto_in
          in: query
          description: >-
            Get produtos where Descrição_Produto is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paginator'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/produto'
  /collections/produtos/{id}:
    get:
      summary: Get a single produto
      description: Retrieves the details of a single produto by its ID.
      tags:
        - Produtos
      parameters:
        - name: id
          in: path
          description: The ID of the produto
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: []
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/produto'
        '404':
          description: The produto was not found
    put:
      summary: Update an existing produto (full replace)
      description: >-
        Updates a single produto by its ID. The properties to update are passed
        in the request body as JSON. This operation fully replaces the entity
        and its relations. Leaving a property out will remove it.
      tags:
        - Produtos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateprodutoDto'
      parameters:
        - name: id
          in: path
          description: The ID of the produto
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/produto'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    patch:
      summary: Update an existing produto (partial update)
      description: >-
        Updates a single produto by its ID. The properties to update are passed
        in the request body as JSON. This operation partially updates the entity
        and its relations. Leaving a property out will not remove it.
      tags:
        - Produtos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateprodutoDto'
      parameters:
        - name: id
          in: path
          description: The ID of the produto
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/produto'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    delete:
      summary: Delete an existing produto
      description: Deletes a single produto by its ID.
      tags:
        - Produtos
      parameters:
        - name: id
          in: path
          description: The ID of the produto
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/produto'
        '404':
          description: The produto was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
  /collections/produtos/select-options:
    get:
      summary: List produtos for select options (admin panel)
      description: >-
        Retrieves a list of produtos for select options. The response is an
        array of objects with the properties 'id' and 'label'. Used in the admin
        panel to fill select dropdowns.
      tags:
        - Produtos
      security:
        - Admin: []
      responses:
        '200':
          description: List of produtos for select options
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SelectOption'
  /collections/clientes:
    post:
      summary: Create a new clientes
      description: >-
        Creates a new clientes passing the properties in the request body as
        JSON.
      tags:
        - Clientes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateclientesDto'
      security:
        - Admin: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientes'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
                  error:
                    type: string
                    example: Bad Request
                  statusCode:
                    type: integer
                    example: 400
    get:
      summary: List clientes
      description: >-
        Retrieves a paginated list of clientes. In addition to the general
        parameters below, each property of the clientes can be used as a filter:
        https://manifest.build/docs/crud#get-a-list-of-items
      tags:
        - Clientes
      security: []
      parameters:
        - name: page
          in: query
          description: The page number
          required: false
          schema:
            type: integer
            default: 1
        - name: perPage
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          description: The field to order by
          required: false
          schema:
            type: string
            enum:
              - Foto
              - Cliente
            default: createdAt
        - name: order
          in: query
          description: The order direction
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: []
        - name: Cliente_eq
          in: query
          description: Get clientes where Cliente equals the specified value
          required: false
          schema:
            type: string
        - name: Cliente_neq
          in: query
          description: Get clientes where Cliente does not equal the specified value
          required: false
          schema:
            type: string
        - name: Cliente_like
          in: query
          description: >-
            Get clientes where Cliente contains or matches the specified pattern
            (use % for wildcards)
          required: false
          schema:
            type: string
        - name: Cliente_in
          in: query
          description: >-
            Get clientes where Cliente is one of the specified values
            (comma-separated)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paginator'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/clientes'
  /collections/clientes/{id}:
    get:
      summary: Get a single clientes
      description: Retrieves the details of a single clientes by its ID.
      tags:
        - Clientes
      parameters:
        - name: id
          in: path
          description: The ID of the clientes
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
        - name: relations
          in: query
          description: >-
            The relations to include. For several relations, use a
            comma-separated list
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: []
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientes'
        '404':
          description: The clientes was not found
    put:
      summary: Update an existing clientes (full replace)
      description: >-
        Updates a single clientes by its ID. The properties to update are passed
        in the request body as JSON. This operation fully replaces the entity
        and its relations. Leaving a property out will remove it.
      tags:
        - Clientes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateclientesDto'
      parameters:
        - name: id
          in: path
          description: The ID of the clientes
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientes'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    patch:
      summary: Update an existing clientes (partial update)
      description: >-
        Updates a single clientes by its ID. The properties to update are passed
        in the request body as JSON. This operation partially updates the entity
        and its relations. Leaving a property out will not remove it.
      tags:
        - Clientes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateclientesDto'
      parameters:
        - name: id
          in: path
          description: The ID of the clientes
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientes'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
    delete:
      summary: Delete an existing clientes
      description: Deletes a single clientes by its ID.
      tags:
        - Clientes
      parameters:
        - name: id
          in: path
          description: The ID of the clientes
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      security:
        - Admin: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientes'
        '404':
          description: The clientes was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not Found
                  error:
                    type: string
                    example: Not Found
                  statusCode:
                    type: integer
                    example: 404
  /collections/clientes/select-options:
    get:
      summary: List clientes for select options (admin panel)
      description: >-
        Retrieves a list of clientes for select options. The response is an
        array of objects with the properties 'id' and 'label'. Used in the admin
        panel to fill select dropdowns.
      tags:
        - Clientes
      security:
        - Admin: []
      responses:
        '200':
          description: List of clientes for select options
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SelectOption'
  /manifest:
    get:
      summary: Get the manifest
      description: Retrieves the manifest of the application.
      tags:
        - Manifest
      security:
        - Admin: []
      responses:
        '200':
          description: The manifest of the application.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppManifest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                  statusCode:
                    type: number
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
  /manifest/entities/produtos:
    get:
      summary: Get the produto manifest
      description: Retrieves the manifest of the produto entity with all its properties.
      tags:
        - Manifest
      security:
        - Admin: []
      responses:
        '200':
          description: The manifest of the produto entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityManifest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                  statusCode:
                    type: number
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
  /manifest/entities/clientes:
    get:
      summary: Get the clientes manifest
      description: Retrieves the manifest of the clientes entity with all its properties.
      tags:
        - Manifest
      security:
        - Admin: []
      responses:
        '200':
          description: The manifest of the clientes entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityManifest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                  statusCode:
                    type: number
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
  /auth/admins/login:
    post:
      summary: Login as a admin
      description: Logs in as a admin.
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: example@manifest.build
              password: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              example:
                token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20iLCJlbnRpdHlTbHVnIjoidHJhaW5lcnMiLCJpYXQiOjE3NTA4NjUyNjB9.8KRlyPPlNWvHDc_yaocqrqYBhAzAyn5PvyCKyvUUCM4
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: array
                    items:
                      type: string
                  error:
                    type: string
              example:
                message:
                  - password should not be empty
                statusCode: 400
                error: Bad Request
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: string
              example:
                message: Invalid email or password
                statusCode: 401
  /auth/admins/me:
    get:
      summary: Get current admin
      description: Get current admin.
      tags:
        - Auth
      security:
        - Admin: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: string
                  error:
                    type: string
              example:
                message: Forbidden resource
                error: Forbidden
                statusCode: 403
components:
  schemas:
    produto:
      type: object
      description: produto entity schema
      properties:
        id:
          type: string
          description: The unique identifier for the entity
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        Titulo:
          type: string
          description: The Titulo property of the entity (string)
          example: This is a simple string example.
          nullable: true
        Subtitulo:
          type: string
          description: The Subtitulo property of the entity (string)
          example: This is a simple string example.
          nullable: true
        Descrição_Card:
          type: string
          description: The Descrição_Card property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        Descrição_Produto:
          type: string
          description: The Descrição_Produto property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        Foto1:
          description: The Foto1 property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
        Foto2:
          description: The Foto2 property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
        Foto3:
          description: The Foto3 property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
        Foto4:
          description: The Foto4 property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
    clientes:
      type: object
      description: clientes entity schema
      properties:
        id:
          type: string
          description: The unique identifier for the entity
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        Foto:
          description: The Foto property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
        Cliente:
          type: string
          description: The Cliente property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
    CreateUpdateprodutoDto:
      type: object
      description: CreateUpdateprodutoDto entity schema
      properties:
        Titulo:
          type: string
          description: The Titulo property of the entity (string)
          example: This is a simple string example.
          nullable: true
        Subtitulo:
          type: string
          description: The Subtitulo property of the entity (string)
          example: This is a simple string example.
          nullable: true
        Descrição_Card:
          type: string
          description: The Descrição_Card property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        Descrição_Produto:
          type: string
          description: The Descrição_Produto property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
        Foto1:
          description: The Foto1 property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
        Foto2:
          description: The Foto2 property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
        Foto3:
          description: The Foto3 property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
        Foto4:
          description: The Foto4 property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
    CreateUpdateclientesDto:
      type: object
      description: CreateUpdateclientesDto entity schema
      properties:
        Foto:
          description: The Foto property of the entity (image)
          type: object
          additionalProperties: false
          example:
            large: https://example.com/image-large.jpg
          required:
            - large
          properties:
            large:
              type: string
              format: uri
              description: Image URL for size large
              example: https://example.com/image-large.jpg
        Cliente:
          type: string
          description: The Cliente property of the entity (text)
          example: >-
            This is a longer text example that might span multiple lines and
            contain more detailed information.
          nullable: true
    Paginator:
      type: object
      description: >-
        A paginated response object, containing an array of data and pagination
        information.
      properties:
        data:
          type: array
          items:
            type: object
        currentPage:
          type: integer
          example: 1
        lastPage:
          type: integer
          example: 20
        from:
          type: integer
          example: 1
        to:
          type: integer
          example: 10
        total:
          type: integer
          example: 200
        perPage:
          type: integer
          example: 10
      required:
        - data
        - currentPage
        - lastPage
        - from
        - to
        - total
        - perPage
    SelectOption:
      type: object
      description: >-
        A small object representing a selectable option. Useful for dropdowns in
        admin panels.
      properties:
        id:
          type: number
        label:
          type: string
      required:
        - id
        - label
    AppManifest:
      type: object
      description: >-
        The manifest of the application, containing metadata and entities. Gives
        an overview of the application structure.
      properties:
        name:
          type: string
        entities:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EntityManifest'
    EntityManifest:
      type: object
      description: >-
        The manifest of an entity, containing its properties and relationships.
        Provides a detailed structure of the entity.
      properties:
        className:
          type: string
        nameSingular:
          type: string
        namePlural:
          type: string
        slug:
          type: string
        mainProp:
          type: string
        seedCount:
          type: number
        belongsTo:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipManifest'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyManifest'
      required:
        - className
        - nameSingular
        - namePlural
        - slug
        - mainProp
        - seedCount
    RelationshipManifest:
      type: object
      description: >-
        The manifest of a relationship between entities, describing how they are
        connected.
      properties:
        name:
          type: string
        entity:
          type: string
        eager:
          type: boolean
      required:
        - name
        - entity
    PropertyManifest:
      type: object
      description: >-
        The manifest of a property of an entity, describing its type and
        characteristics.
      properties:
        name:
          type: string
        type:
          type: string
      required:
        - name
        - type
  securitySchemes:
    Admin:
      type: http
      scheme: bearer
      name: Admin auth
      bearerFormat: JWT
      description: >-
        Authentication for Admin entity. Use POST /auth/admins/login to get a
        token.
